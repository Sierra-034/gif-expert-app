{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","URL","encodeURI","fetch","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","imgSetter","imgs","setTimeout","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SATW,SAAEC,GACnBA,EAAMC,iBACFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAjBc,SAAEP,GACxBF,EAAeE,EAAMQ,OAAOF,a,+BCPvBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,wEAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGEA,EAASC,OAHX,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QATvB,kBAaZL,GAbY,4CAAH,sDCCPQ,EAAc,SAAC,GAAqB,EAApBL,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEpC,OACI,sBAAKI,UAAU,2DAAf,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCHHQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAMhCC,EAAY,SAACC,GACfC,YAAW,WACPH,EAAS,CACLhB,KAAMkB,EACNJ,SAAS,MAEd,MAQP,OALAM,qBAAU,WACN5B,EAAQC,GACH4B,KAAKJ,KACX,CAACxB,IAEGsB,EDjByBO,CAAa7B,GAAhCc,EAFwB,EAE9BP,KAAcc,EAFgB,EAEhBA,QAErB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAoDjB,IACnDqB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SACKH,EAAOL,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEUdmB,EArBM,WAAO,IAAD,EAEe5C,mBAAS,CAAC,SAFzB,mBAEfQ,EAFe,KAEHT,EAFG,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BACMS,EAAWe,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,YCR5B+B,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.4e1395f4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n    \n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( event ) => {\n        setInputValue( event.target.value );\n    };\n\n    const handleSubmit = ( event ) => {\n        event.preventDefault();\n        if( inputValue.trim().length > 2 ) {\n            setCategories( categories => [inputValue, ...categories] );\n            setInputValue('');\n        }\n    };\n    \n    return (\n        <form onSubmit={ handleSubmit } >\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};","\nexport const getGifs = async (category) => {\n    const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&limit=10&api_key=4N0WEqRJUE4MR2NNALGC8qIYVvuNUXwM`;\n    const response = await fetch(URL);\n    const {data} = await response.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    \n    return gifs\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n        <div className=\"card-grid\">\n            {images.map(img => (\n                <GifGridItem\n                    key={img.id}\n                    {...img}\n                />\n            ))}\n        </div>\n        </>\n    );\n};","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    const imgSetter = (imgs) => {\n        setTimeout(() => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        }, 500);\n    };\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgSetter);\n    }, [category]);\n\n    return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n\n    const [ categories, setCategories ] = useState([\"Halo\"]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr/>\n            <ol>\n                { categories.map(category => (\n                    <GifGrid\n                        key={category}\n                        category={category}\n                    />\n                )) }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\nimport 'animate.css';\n\n ReactDOM.render( <GifExpertApp />, document.getElementById('root') );"],"sourceRoot":""}